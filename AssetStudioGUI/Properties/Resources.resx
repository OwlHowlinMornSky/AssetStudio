<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="fs" xml:space="preserve">
    <value>#version 140

in vec3 normal;

out vec4 outputColor;

void main()
{
	vec3 unitNormal = normalize(normal);
	float nDotProduct = clamp(dot(unitNormal, vec3(0.707, 0, 0.707)), 0, 1);
	vec2 ContributionWeightsSqrt = vec2(0.5, 0.5f) + vec2(0.5f, -0.5f) * unitNormal.y;
	vec2 ContributionWeights = ContributionWeightsSqrt * ContributionWeightsSqrt;

	vec3 color = nDotProduct * vec3(1, 0.957, 0.839) / 3.14159;
	color += vec3(0.779, 0.716, 0.453) * ContributionWeights.y;
	color += vec3(0.368, 0.477, 0.735) * ContributionWeights.x;
	outputColor = vec4(sqrt(color), 1);
}</value>
  </data>
  <data name="fsBlack" xml:space="preserve">
    <value>#version 140

out vec4 outputColor;

void main()
{
	outputColor = vec4(0, 0, 0, 1);
}</value>
  </data>
  <data name="fsColor" xml:space="preserve">
    <value>#version 140

out vec4 outputColor;
in vec4 color;

void main()
{
	outputColor = color;
}</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="preview" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\preview.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="vs" xml:space="preserve">
    <value>#version 140

in vec3 vertexPosition;
in vec3 normalDirection;
in vec4 vertexColor;
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projMatrix;

out vec3 normal;
out vec4 color;

void main()
{
	gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1.0);
	normal = normalDirection;
	color = vertexColor; 
}</value>
  </data>
  <data name="zls_Exporting" xml:space="preserve">
    <value>Exporting</value>
  </data>
  <data name="zls_Exporting.zh-CN" xml:space="preserve">
    <value>导出中</value>
  </data>
  <data name="zls_load_finishLoading" xml:space="preserve">
    <value>Finished loading {0} files with {1} exportable assets.</value>
  </data>
  <data name="zls_load_finishLoading.zh-CN" xml:space="preserve">
    <value>加载了 {0} 个文件，共计 {1} 个可导出的资料。</value>
  </data>
  <data name="zls_preview_audio_format_head" xml:space="preserve">
    <value>Compression format: </value>
  </data>
  <data name="zls_preview_audio_format_head.zh-CN" xml:space="preserve">
    <value>编码格式：</value>
  </data>
  <data name="zls_preview_GL_cannotPreview" xml:space="preserve">
    <value>Unable to preview this mesh</value>
  </data>
  <data name="zls_preview_GL_cannotPreview.zh-CN" xml:space="preserve">
    <value>无法预览该mesh</value>
  </data>
  <data name="zls_preview_GL_info0" xml:space="preserve">
    <value>Using OpenGL Version: </value>
  </data>
  <data name="zls_preview_GL_info0.zh-CN" xml:space="preserve">
    <value>使用的 OpenGL 的版本: </value>
  </data>
  <data name="zls_preview_GL_info1" xml:space="preserve">
    <value>'Mouse Left' = Rotate Model | 'Mouse Right' = Rotate Camera | 'Mouse Wheel' = Move
'Ctrl + W' = Wireframe | 'Ctrl + S' = Shade | 'Ctrl + N' = ReNormal | 'Ctrl + R' = Reset</value>
  </data>
  <data name="zls_preview_GL_info1.zh-CN" xml:space="preserve">
    <value>'鼠标左键' = 旋转模型 | '鼠标右键' = 旋转摄像机 | '鼠标滚轮' = 移动
'Ctrl + W' = 线框 | 'Ctrl + S' = 阴影 | 'Ctrl + N' = 重算法线 | 'Ctrl + R' = 重置</value>
  </data>
  <data name="zls_setting_OkMessageboxText" xml:space="preserve">
    <value>%Restart to apply the change.
</value>
  </data>
  <data name="zls_setting_OkMessageboxText.en-US" xml:space="preserve">
    <value>Change of language will work after restart.
Do you want to restart now?
</value>
  </data>
  <data name="zls_setting_OkMessageboxText.zh-CN" xml:space="preserve">
    <value>语言改动将在重启后生效。
立即重启吗？
</value>
  </data>
  <data name="zls_setting_OkMessageboxTitle" xml:space="preserve">
    <value>%Change lang.</value>
  </data>
  <data name="zls_setting_OkMessageboxTitle.en-US" xml:space="preserve">
    <value>Change language</value>
  </data>
  <data name="zls_setting_OkMessageboxTitle.zh-CN" xml:space="preserve">
    <value>更改语言</value>
  </data>
  <data name="_as" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\as.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>